<div class="container">
    <?php if (isset($error)): ?>
        <div class="alert alert-danger fade-in" role="alert">
            <strong>–ü–æ–º–∏–ª–∫–∞!</strong> <?= $this->escape($error) ?>
        </div>
    <?php endif; ?>

    <!-- Breadcrumb Navigation -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/" class="text-decoration-none">–ì–æ–ª–æ–≤–Ω–∞</a>
            </li>
            <?php if ($currentCategory): ?>
                <li class="breadcrumb-item active" aria-current="page">
                    <?= $this->escape($currentCategory['name']) ?>
                </li>
            <?php endif; ?>
            <?php if (isset($searchTerm)): ?>
                <li class="breadcrumb-item active" aria-current="page">
                    –ü–æ—à—É–∫: "<?= $this->escape($searchTerm) ?>"
                </li>
            <?php endif; ?>
        </ol>
    </nav>

    <!-- Search Box -->
    <div class="row mb-4">
        <div class="col-md-6 offset-md-3">
            <form method="GET" action="/search" class="search-box">
                <input type="text"
                       class="form-control form-control-lg"
                       name="q"
                       placeholder="–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤..."
                       value="<?= isset($searchTerm) ? $this->escape($searchTerm) : '' ?>">
                <?php if ($currentCategoryId): ?>
                    <input type="hidden" name="category" value="<?= $currentCategoryId ?>">
                <?php endif; ?>
                <button type="submit" class="search-btn">
                    üîç
                </button>
            </form>
        </div>
    </div>

    <div class="row">
        <!-- Sidebar - Categories -->
        <div class="col-md-3">
            <div class="sidebar">
                <h4 class="mb-4">
                    –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
                    <span class="badge bg-primary ms-2"><?= count($categories) ?></span>
                </h4>

                <div id="categories">
                    <!-- All Products Category -->
                    <div class="category-item <?= $currentCategoryId === null ? 'active' : '' ?>"
                         data-category="all">
                        <span>–í—Å—ñ —Ç–æ–≤–∞—Ä–∏</span>
                        <span class="category-count"><?= $totalProducts ?></span>
                    </div>

                    <!-- Individual Categories -->
                    <?php foreach ($categories as $category): ?>
                        <div class="category-item <?= $currentCategoryId === $category['id'] ? 'active' : '' ?>"
                             data-category="<?= $category['id'] ?>">
                            <span><?= $this->escape($category['name']) ?></span>
                            <span class="category-count"><?= $category['product_count'] ?></span>
                        </div>
                    <?php endforeach; ?>
                </div>

                <!-- Category Statistics -->
                <div class="mt-4 pt-3 border-top">
                    <small class="text-muted">
                        <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong><br>
                        –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: <?= count($categories) ?><br>
                        –¢–æ–≤–∞—Ä—ñ–≤: <?= $totalProducts ?>
                    </small>
                </div>
            </div>
        </div>

        <!-- Main Content - Products -->
        <div class="col-md-9">
            <!-- Sort and Filter Controls -->
            <div class="sort-container">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="mb-0">
                            <?php if ($currentCategory): ?>
                                <?= $this->escape($currentCategory['name']) ?>
                            <?php elseif (isset($searchTerm)): ?>
                                –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: "<?= $this->escape($searchTerm) ?>"
                            <?php else: ?>
                                –í—Å—ñ —Ç–æ–≤–∞—Ä–∏
                            <?php endif ?>
                            <span class="badge bg-secondary ms-2"><?= count($products) ?></span>
                        </h5>
                    </div>

                    <div class="col-md-6">
                        <div class="d-flex align-items-center justify-content-md-end">
                            <label for="sortSelect" class="form-label me-2 mb-0">
                                üîΩ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:
                            </label>
                            <select id="sortSelect" class="form-select" style="width: auto;">
                                <option value="price_asc" <?= $currentSort === 'price_asc' ? 'selected' : '' ?>>
                                    –°–ø–æ—á–∞—Ç–∫—É –¥–µ—à–µ–≤—à—ñ
                                </option>
                                <option value="name_asc" <?= $currentSort === 'name_asc' ? 'selected' : '' ?>>
                                    –ü–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
                                </option>
                                <option value="date_desc" <?= $currentSort === 'date_desc' ? 'selected' : '' ?>>
                                    –°–ø–æ—á–∞—Ç–∫—É –Ω–æ–≤—ñ
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div id="products" class="fade-in">
                <?= $this->partial('products', ['products' => $products]) ?>
            </div>
        </div>
    </div>
</div>

<!-- Product Details Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">üõçÔ∏è –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="productModalBody">
                <div class="loading">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                    </div>
                    <p class="mt-3">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    ‚ùå –ó–∞–∫—Ä–∏—Ç–∏
                </button>
                <button type="button" class="btn btn-success btn-buy-now">
                    üí∞ –ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    /**
     * MVC Product Catalog Class
     */
    class ProductCatalog {
        constructor() {
            this.currentCategory = <?= json_encode($currentCategoryId) ?>;
            this.currentSort = <?= json_encode($currentSort) ?>;
            this.apiUrl = '/api';
            this.isLoading = false;

            this.init();
        }

        init() {
            this.bindEvents();
            this.initializeState();
        }

        initializeState() {
            // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            this.updateActiveStates();
        }

        updateActiveStates() {
            // –û–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            document.querySelectorAll('.category-item').forEach(item => {
                item.classList.remove('active');
                const category = item.getAttribute('data-category');

                if ((category === 'all' && this.currentCategory === null) ||
                    (parseInt(category) === this.currentCategory)) {
                    item.classList.add('active');
                }
            });

            // –û–Ω–æ–≤–∏—Ç–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                sortSelect.value = this.currentSort;
            }
        }

        bindEvents() {
            // –ö–ª—ñ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            const categoriesContainer = document.getElementById('categories');
            if (categoriesContainer) {
                categoriesContainer.addEventListener('click', (e) => {
                    const categoryItem = e.target.closest('.category-item');
                    if (categoryItem) {
                        const category = categoryItem.getAttribute('data-category');
                        this.selectCategory(category);
                    }
                });
            }

            // –ó–º—ñ–Ω–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            const sortSelect = document.getElementById('sortSelect');
            if (sortSelect) {
                sortSelect.addEventListener('change', (e) => {
                    this.changeSort(e.target.value);
                });
            }

            // –ö–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏"
            const productsContainer = document.getElementById('products');
            if (productsContainer) {
                productsContainer.addEventListener('click', (e) => {
                    if (e.target.classList.contains('btn-buy')) {
                        const productId = parseInt(e.target.getAttribute('data-product-id'));
                        this.showProductModal(productId);
                    }
                });
            }

            // –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑" –≤ –º–æ–¥–∞–ª—Ü—ñ
            const buyNowBtn = document.querySelector('.btn-buy-now');
            if (buyNowBtn) {
                buyNowBtn.addEventListener('click', () => {
                    this.buyNow();
                });
            }
        }

        selectCategory(category) {
            if (this.isLoading) return;

            this.currentCategory = category === 'all' ? null : parseInt(category);
            this.updateUrl();
            this.loadProducts();
        }

        changeSort(sort) {
            if (this.isLoading) return;

            this.currentSort = sort;
            this.updateUrl();
            this.loadProducts();
        }

        updateUrl() {
            const params = new URLSearchParams();

            if (this.currentCategory !== null) {
                params.set('category', this.currentCategory);
            }

            params.set('sort', this.currentSort);

            const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
            window.history.pushState({}, '', newUrl);
        }

        loadProducts() {
            if (this.isLoading) return;

            this.isLoading = true;
            const productsContainer = document.getElementById('products');

            // –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            productsContainer.innerHTML = `
            <div class="loading">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                </div>
                <p class="mt-3">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...</p>
            </div>
        `;

            // –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
            const params = new URLSearchParams({
                sort: this.currentSort
            });

            if (this.currentCategory !== null) {
                params.set('category', this.currentCategory);
            }

            // –í–∏–∫–æ–Ω–∞—Ç–∏ Ajax –∑–∞–ø–∏—Ç
            fetch(`${this.apiUrl}/products?${params}`)
                .then(response => response.json())
                .then(data => {
                    this.isLoading = false;

                    if (data.status === 'success') {
                        this.renderProducts(data.data.products || data.data);
                        this.updateActiveStates();
                    } else {
                        this.showError(data.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤');
                    }
                })
                .catch(error => {
                    this.isLoading = false;
                    console.error('Ajax Error:', error);
                    this.showError('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤');
                });
        }

        renderProducts(products) {
            const productsContainer = document.getElementById('products');

            if (!products || products.length === 0) {
                productsContainer.innerHTML = `
                <div class="alert alert-info">
                    <h5>üì≠ –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</h5>
                    <p class="mb-0">–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.</p>
                </div>
            `;
                return;
            }

            let html = '';
            products.forEach(product => {
                const price = parseFloat(product.price);
                const date = formatDate(product.date_added);

                html += `
                <div class="card product-card">
                    <div class="card-body">
                        <h5 class="card-title">${escapeHtml(product.name)}</h5>
                        <p class="card-text price">${formatPrice(price)}</p>
                        <p class="card-text">
                            <small class="text-muted">
                                üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${escapeHtml(product.category_name)}
                            </small>
                        </p>
                        <p class="card-text">
                            <small class="text-muted">üìÖ –î–∞—Ç–∞: ${date}</small>
                        </p>
                        <button class="btn btn-success btn-buy" data-product-id="${product.id}">
                            üõí –ö—É–ø–∏—Ç–∏
                        </button>
                    </div>
                </div>
            `;
            });

            productsContainer.innerHTML = html;
            productsContainer.classList.add('fade-in');
        }

        showProductModal(productId) {
            const modal = new bootstrap.Modal(document.getElementById('productModal'));
            const modalBody = document.getElementById('productModalBody');
            const modalTitle = document.getElementById('productModalLabel');

            // –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –º–æ–¥–∞–ª—Ü—ñ
            modalTitle.textContent = 'üõçÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
            modalBody.innerHTML = `
            <div class="loading">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                </div>
                <p class="mt-3">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä...</p>
            </div>
        `;

            modal.show();

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É
            fetch(`${this.apiUrl}/product?id=${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const product = data.data;
                        this.renderProductModal(product);
                    } else {
                        modalBody.innerHTML = `
                        <div class="alert alert-danger">
                            ‚ùå –ü–æ–º–∏–ª–∫–∞: ${data.message}
                        </div>
                    `;
                    }
                })
                .catch(error => {
                    console.error('Ajax Error:', error);
                    modalBody.innerHTML = `
                    <div class="alert alert-danger">
                        ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
                    </div>
                `;
                });
        }

        renderProductModal(product) {
            const modalTitle = document.getElementById('productModalLabel');
            const modalBody = document.getElementById('productModalBody');

            modalTitle.textContent = `üõçÔ∏è ${product.name}`;

            const price = parseFloat(product.price);
            const date = formatDate(product.date_added);

            modalBody.innerHTML = `
            <div class="row">
                <div class="col-12">
                    <h4 class="mb-3">${escapeHtml(product.name)}</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>üí∞ –¶—ñ–Ω–∞:</strong> <span class="price fs-4">${formatPrice(price)}</span></p>
                            <p><strong>üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> ${escapeHtml(product.category_name)}</p>
                            <p><strong>üìÖ –î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è:</strong> ${date}</p>
                        </div>
                        <div class="col-md-6">
                            <div class="alert alert-info">
                                <h6>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É</h6>
                                <ul class="mb-0">
                                    <li>üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω</li>
                                    <li>‚ö° –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ 1-2 –¥–Ω—ñ</li>
                                    <li>üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

            // –ó–±–µ—Ä–µ–≥—Ç–∏ ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            this.currentProductId = product.id;
        }

        buyNow() {
            if (this.currentProductId) {
                // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ–∫—É–ø–∫–∏
                alert(`üõí –¢–æ–≤–∞—Ä ID ${this.currentProductId} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!\n\n(–¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è - —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞)`);

                // –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É
                const modal = bootstrap.Modal.getInstance(document.getElementById('productModal'));
                if (modal) {
                    modal.hide();
                }
            }
        }

        showError(message) {
            const productsContainer = document.getElementById('products');
            productsContainer.innerHTML = `
            <div class="alert alert-danger">
                <strong>‚ùå –ü–æ–º–∏–ª–∫–∞!</strong> ${escapeHtml(message)}
            </div>
        `;
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    document.addEventListener('DOMContentLoaded', () => {
        new ProductCatalog();
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('popstate', () => {
        location.reload();
    });
</script>